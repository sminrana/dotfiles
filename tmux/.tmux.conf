unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# Kill pane without confirmation
unbind x
bind x confirm-before -p "kill-pane #P? (y/n)" kill-pane

# Extra: prefix + X = kill-pane WITHOUT confirmation (instant)
bind X if-shell '[ "$(tmux list-panes | wc -l)" -gt 1 ]' 'kill-pane' 'kill-window'

# Screen splitting
bind - split-window -v -c "#{pane_current_path}"
bind | split-window -h -c "#{pane_current_path}"

# Pane resizing
bind -r h resize-pane -L 5
bind -r j resize-pane -D 5
bind -r k resize-pane -U 5
bind -r l resize-pane -R 5

# =======================KEYBOARD========================================
set -g allow-passthrough on
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM

# macOS clipboard integration
bind -T copy-mode-vi y send -X copy-pipe "pbcopy"
bind -n Home send Escape "OH"
bind -n End send Escape "OF"

# =======================MISC========================================

set -g history-limit 5000
set-option -g base-index 1
set-option -g pane-base-index 1
set-option -g renumber-windows on
set -g default-terminal "screen-256color"

set -g mouse on
setw -g mode-keys vi
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy || xclip -i -selection clipboard || wl-copy"

# messages
# set-environment -g PATH "/opt/homebrew/bin:/bin:/usr/bin"  # Uncomment only if needed

bind r source-file ~/.tmux.conf \; display "tmux configuration reloaded..."

# Show window index + current program/dir
set -g window-status-format "#I:#W"
set -g window-status-current-format "#I:#W"

set -sg escape-time 0
set -g allow-rename off
setw -g automatic-rename on
set -g automatic-rename-format "#{b:pane_current_path}:#{b:pane_current_command}"
set -g focus-events on
set -g status-interval 2

# set-hook -g after-select-window 'run-shell "
# window_name=\$(tmux display-message -p -t ! \"#{window_index}:#{window_name}\")
# # Show centered popup for 0.5 seconds with orange background and white text
# tmux display-popup -E -w 50 -h 5 -y C -x C bash -c \"echo -e \\\"\e[48;5;214;97m \$window_name \e[0m\\\"; sleep 0.3\"
# "'

#===================================PLUGINS========================================
# Automatic installation of plugins on new machine
if "test ! -d ~/.tmux/plugins/tpm" \
    "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

set -g @plugin 'tmux-plugins/tpm'

# Sensible defaults (safe, lightweight)
set -g @plugin 'tmux-plugins/tmux-sensible'

# Copy/yank to system clipboard
set -g @plugin 'tmux-plugins/tmux-yank'

# Vim-like searching in scrollback
set -g @plugin 'tmux-plugins/tmux-copycat'

# Session persistence (resurrect + continuum combo)
#set -g @plugin 'tmux-plugins/tmux-resurrect'
#set -g @plugin 'tmux-plugins/tmux-continuum'
#set -g @continuum-restore 'on'

# Optional: prefix highlighting (visual feedback)
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'erikw/tmux-powerline'
set -g @plugin 'tmux-plugins/tmux-open'

# vim tmux navigation
vim_pattern='(\S+/)?g?\.?(view|l?n?vim?x?|fzf)(diff)?(-wrapped)?'
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +${vim_pattern}$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# Initialize TPM (Tmux Plugin Manager)
run '~/.tmux/plugins/tpm/tpm'
